input {
  # TCP input for .NET Core structured logs
  tcp {
    port => 5001
    codec => json_lines
    tags => ["dotnet-api"]
  }
  
  # Beats input for Filebeat and other beats
  beats {
    port => 5044
    tags => ["beats"]
  }
  
  # HTTP input for direct log shipping
  http {
    port => 8080
    tags => ["http-logs"]
  }
}

filter {
  # Process .NET Core API logs
  if "dotnet-api" in [tags] {
    # Parse .NET Core structured logs
    if [Level] {
      mutate {
        lowercase => [ "Level" ]
        rename => { "Level" => "log_level" }
      }
    }
    
    # Add timestamp
    if [Timestamp] {
      date {
        match => [ "Timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }
    
    # Parse exception details
    if [Exception] {
      mutate {
        add_field => { "has_exception" => true }
      }
    }
    
    # Add application context
    mutate {
      add_field => { 
        "application" => "musetrip360-api"
        "environment" => "development"
      }
    }
    
    # Parse request context if available
    if [Properties] {
      if [Properties][RequestId] {
        mutate {
          add_field => { "request_id" => "%{[Properties][RequestId]}" }
        }
      }
      
      if [Properties][UserId] {
        mutate {
          add_field => { "user_id" => "%{[Properties][UserId]}" }
        }
      }
      
      if [Properties][CorrelationId] {
        mutate {
          add_field => { "correlation_id" => "%{[Properties][CorrelationId]}" }
        }
      }
    }
  }
  
  # Process HTTP access logs
  if "http-logs" in [tags] {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG}" 
      }
    }
    
    if [response] {
      mutate {
        convert => { "response" => "integer" }
      }
    }
    
    if [bytes] {
      mutate {
        convert => { "bytes" => "integer" }
      }
    }
  }
  
  # Process Beats logs
  if "beats" in [tags] {
    # Add beat source information
    if [beat] {
      mutate {
        add_field => { "beat_name" => "%{[beat][name]}" }
        add_field => { "beat_hostname" => "%{[beat][hostname]}" }
      }
    }
  }
  
  # Common processing for all logs
  # Remove empty fields
  if [message] == "" {
    drop { }
  }
  
  # Add processing timestamp
  mutate {
    add_field => { "processed_at" => "%{@timestamp}" }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["http://elastic:9200"]
    user => "elastic"
    password => "musetrip360_elastic"
    
    # Use different indices based on log type
    if "dotnet-api" in [tags] {
      index => "musetrip360-api-logs-%{+YYYY.MM.dd}"
    } else if "beats" in [tags] {
      index => "musetrip360-beats-logs-%{+YYYY.MM.dd}"
    } else if "http-logs" in [tags] {
      index => "musetrip360-access-logs-%{+YYYY.MM.dd}"
    } else {
      index => "musetrip360-general-logs-%{+YYYY.MM.dd}"
    }
    
    # Index template for API logs
    template_name => "musetrip360-api-logs"
    template_pattern => "musetrip360-api-logs-*"
    template => {
      "index_patterns" => ["musetrip360-api-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "log_level" => { "type" => "keyword" }
          "message" => { 
            "type" => "text",
            "fields" => {
              "keyword" => {
                "type" => "keyword",
                "ignore_above" => 256
              }
            }
          }
          "application" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "has_exception" => { "type" => "boolean" }
          "request_id" => { "type" => "keyword" }
          "user_id" => { "type" => "keyword" }
          "correlation_id" => { "type" => "keyword" }
          "processed_at" => { "type" => "date" }
        }
      }
    }
  }
  
  # Debug output for development (comment out in production)
  stdout {
    codec => rubydebug {
      metadata => false
    }
  }
} 