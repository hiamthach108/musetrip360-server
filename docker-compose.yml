version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.1-alpine
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-exeredis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-exeredis}"]

  rabbitmq:
    image: rabbitmq:4.1-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-password}
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-musetrip360_elastic}
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=musetrip360-cluster
      - node.name=musetrip360-elastic
      - xpack.security.authc.api_key.enabled=true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-u", "elastic:${ELASTIC_PASSWORD:-musetrip360_elastic}", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - default
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD:-musetrip360_kibana}
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - XPACK_SECURITY_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY:-dev_key_32_chars_long_for_security}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_SAVED_OBJECTS_KEY:-dev_saved_objects_key_32_chars_long}
      - XPACK_REPORTING_ENCRYPTIONKEY=${KIBANA_REPORTING_KEY:-dev_reporting_key_32_chars_long_sec}
    ports:
      - "5601:5601"
    depends_on:
      elastic:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - default
      - elastic

  # Setup service để tạo kibana_system user và admin user
  elastic-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    depends_on:
      elastic:
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-musetrip360_elastic}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD:-musetrip360_kibana}
      - KIBANA_ADMIN_PASSWORD=${KIBANA_ADMIN_PASSWORD:-musetrip360_admin}
    command: >
      bash -c '
        echo "Waiting for Elasticsearch to be ready..."
        until curl -s -u elastic:${ELASTIC_PASSWORD} http://elastic:9200/_cluster/health | grep -q "yellow\|green"; do
          sleep 5
        done
        
        echo "Setting up kibana_system user password..."
        curl -X POST -u elastic:${ELASTIC_PASSWORD} \
          "http://elastic:9200/_security/user/kibana_system/_password" \
          -H "Content-Type: application/json" \
          -d "{\"password\": \"${KIBANA_PASSWORD}\"}" || true
        
        echo "Creating admin user for Kibana access..."
        curl -X POST -u elastic:${ELASTIC_PASSWORD} \
          "http://elastic:9200/_security/user/kibana_admin" \
          -H "Content-Type: application/json" \
          -d "{
            \"password\": \"${KIBANA_ADMIN_PASSWORD}\",
            \"roles\": [\"superuser\", \"kibana_admin\"],
            \"full_name\": \"Kibana Admin\",
            \"email\": \"admin@musetrip360.com\"
          }" || true
        
        echo "Setup completed"
        echo "You can now login to Kibana with:"
        echo "Username: kibana_admin"
        echo "Password: ${KIBANA_ADMIN_PASSWORD}"
      '
    networks:
      - elastic

  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.0
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-musetrip360_elastic}
      - ELASTIC_HOSTS=http://elastic:9200
      - LS_JAVA_OPTS=-Xmx512m -Xms512m
    ports:
      - "5044:5044"  # Beats input
      - "5001:5001"  # TCP input for .NET logs
      - "8080:8080"  # HTTP input for logs
      - "9600:9600"  # Logstash API
    command: >
      logstash -e '
      input {
        tcp {
          port => 5001
          codec => json_lines
          tags => ["dotnet-api"]
        }
        beats {
          port => 5044
          tags => ["beats"]
        }
        http {
          port => 8080
          tags => ["http-logs"]
        }
      }
      
      filter {
        if "dotnet-api" in [tags] {
          if [Level] {
            mutate {
              lowercase => [ "Level" ]
              rename => { "Level" => "log_level" }
            }
          }
          if [Timestamp] {
            date {
              match => [ "Timestamp", "ISO8601" ]
              target => "@timestamp"
            }
          }
          if [Exception] {
            mutate {
              add_field => { "has_exception" => true }
            }
          }
          mutate {
            add_field => { 
              "application" => "musetrip360-api"
              "environment" => "${ASPNETCORE_ENVIRONMENT:-development}"
            }
          }
        }
      }
      
      output {
        elasticsearch {
          hosts => ["http://elastic:9200"]
          user => "elastic"
          password => "${ELASTIC_PASSWORD}"
          index => "musetrip360-logs-%{+YYYY.MM.dd}"
        }
        stdout {
          codec => rubydebug
        }
      }
      '
    depends_on:
      elastic:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - default
      - elastic
  # MuseTrip360 API Application
  musetrip360-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      # .NET Core Configuration overrides
      - ConnectionStrings__DatabaseConnection=Server=postgres;Port=5432;Database=${POSTGRES_DB:-musetrip360db};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-123456};CommandTimeout=20;Timeout=15;
      - ConnectionStrings__RedisConnection=redis:6379,password=${REDIS_PASSWORD:-exeredis},abortConnect=false
      - ConnectionStrings__ElasticsearchConnection=http://elastic:9200
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER:-user}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-password}
      - RabbitMQ__Port=5672
      - RabbitMQ__VirtualHost=/
      - Elasticsearch__Username=elastic
      - Elasticsearch__Password=${ELASTIC_PASSWORD:-musetrip360_elastic}
      - Elasticsearch__DefaultIndex=${ELASTIC_DEFAULT_INDEX:-musetrip360}
      - Elasticsearch__NumberOfShards=${ELASTIC_SHARDS:-1}
      - Elasticsearch__NumberOfReplicas=${ELASTIC_REPLICAS:-0}
      - Elasticsearch__ConnectionString=http://elastic:9200
      - GoogleClientId=${GOOGLE_CLIENT_ID:-google-client-id}
      - GoogleClientSecret=${GOOGLE_CLIENT_SECRET:-google-client-secret}
      - SMTP__Host=${SMTP_HOST:-smtp.gmail.com}
      - SMTP__Port=${SMTP_PORT:-587}
      - SMTP__EnableSSL=${SMTP_ENABLE_SSL:-true}
      - SMTP__Email=${SMTP_EMAIL:-musetrip360-mail}
      - SMTP__Password=${SMTP_PASSWORD:-musetrip360-password}
      - Cloudinary__CloudName=${CLOUDINARY_CLOUD_NAME:-}
      - Cloudinary__ApiKey=${CLOUDINARY_API_KEY:-}
      - Cloudinary__ApiSecret=${CLOUDINARY_API_SECRET:-}
      - PayOS__ClientId=${PAYOS_CLIENT_ID:-}
      - PayOS__ApiKey=${PAYOS_API_KEY:-}
      - PayOS__ChecksumKey=${PAYOS_CHECKSUM_KEY:-}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elastic:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - default
      - elastic
  turnserver:
    image: coturn/coturn:latest
    container_name: turnserver
    restart: unless-stopped
    network_mode: "host"
    volumes:
      - ./turnserver.conf:/etc/coturn/turnserver.conf
    command: ["turnserver", "-c", "/etc/coturn/turnserver.conf", "-v"]
  sfu:
    image: pionwebrtc/ion-sfu:latest-allrpc
    restart: always
    environment:
      - gaddr=0.0.0.0:50051
      - jaddr=0.0.0.0:7000
    volumes:
      - "./config.toml:/configs/sfu.toml"
    ports:
      - 7000:7000
      - 50051:50051
      - 5000-5200:5000-5200/udp
    networks:
      - default
volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:

networks:
  elastic:
    driver: bridge
  default:
    driver: bridge