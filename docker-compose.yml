version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: musetrip360db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.1-alpine
    environment:
      - REDIS_PASSWORD=exeredis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.1-management
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=musetrip360_elastic
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-u", "elastic:musetrip360_elastic", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  ## Get access token for Kibana: docker-compose exec elastic bin/elasticsearch-service-tokens create elastic/kibana kibana_token

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    environment:
      - ELASTICSEARCH_URL=http://elastic:9200
      # - ELASTICSEARCH_SERVICEACCOUNTTOKEN=AAEAAWVsYXN0aWMva2liYW5hL2tpYmFuYV90b2tlbjpVdlY1QUdoMlFReXhDcWZWb1k3UEZB
    ports:
      - "5601:5601"
    depends_on:
      elastic:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - ConnectionStrings__DatabaseConnection=postgresql://postgres:123456@postgres:5432/exedb
  #     - ConnectionStrings__RedisConnection=redis://default:exeredis@redis:6379
  #     - ConnectionStrings__RabbitMQConnection=amqp://user:password@rabbitmq:5672
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:

networks:
  elastic:
    driver: bridge